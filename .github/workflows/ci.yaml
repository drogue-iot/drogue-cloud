name: CI

on:
  push:
    # Run on the main branch
    branches:
      - main
    # Releases are tags named 'v<version>', and must have the "major.minor.micro", for example: "0.1.0".
    # Release candidates are tagged as `v<version>-rc<num>`, for example: "0.1.0-rc1".
    tags:
      - "v*"
  # Also on PRs, just be careful not to publish anything
  pull_request:

env:
  VERSION_HELM: "v3.7.1"
  CONTAINER: docker

jobs:

  check:
    runs-on: ubuntu-20.04

    outputs:
      do-publish: ${{steps.state.outputs.do-publish}}
      release: ${{steps.state.outputs.release}}
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}

    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      # Gather information for build

      - name: Evaluate state
        id: state
        run: |
          test -z "${{github.head_ref}}" && echo '::set-output name=do-publish::true'
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=release::true
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=prerelease::true
          fi

      - name: Set version
        if: ${{github.head_ref == ''}}
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v2
        with:
          path: console-frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('console-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Check
        run: make host-check

  test:
    name: test
    runs-on: ubuntu-20.04
    needs: [check]
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        env:
          RUST_BACKTRACE: "1"
        run: |
          make test

  build:
    name: build
    runs-on: ubuntu-20.04
    needs: [check]
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v2
        with:
          path: console-frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('console-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Run build
        run: |
          make build build-images SKIP_SERVER=1

      - name: Save images
        run: |
          make save-images SKIP_SERVER=1

      - name: Upload images
        uses: actions/upload-artifact@v2
        with:
          name: container-images
          path: build/images/all.tar
          if-no-files-found: error

  server-linux:
    needs: [check]
    runs-on: ubuntu-22.04
    env:
      VERSION: ${{needs.check.outputs.version}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt install -y build-essential curl tzdata libssl-dev pkg-config libsasl2-dev librdkafka-dev libpq-dev libpqxx-dev

      - name: Build binary
        run: |
          PQ_LIB_STATIC=1 SASL2_STATIC=1 OPENSSL_STATIC=1 cargo build --release --features static -p drogue-cloud-server

      - name: Build container image
        run: |
          make 'build-image(server)'

      - name: Export container image
        run: |
          make -C server save-images
          mv build/images/all.tar build/images/server.tar

      - name: Upload server binary
        uses: actions/upload-artifact@v2
        with:
          name: drogue-server-linux-amd64
          path: target/release/drogue-cloud-server
          if-no-files-found: error

      - name: Upload images
        uses: actions/upload-artifact@v2
        with:
          name: container-image-server
          path: build/images/server.tar
          if-no-files-found: error


  server-macos:
    needs: [check]
    runs-on: macos-10.15
    env:
      VERSION: ${{needs.check.outputs.version}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        shell: bash
        run: |
          brew update
          brew install librdkafka openssl

          # Build and install postgresql dep
          curl -fsSL -o postgresql-11.13.tar.gz https://ftp.postgresql.org/pub/source/v11.13/postgresql-11.13.tar.gz
          tar xvf postgresql-11.13.tar.gz
          cd postgresql-11.13
          ./configure --prefix=$PWD/../libpq
          make
          make install
          cd ..
          PQ_LIB_STATIC=1 PQ_LIB_DIR=$PWD/libpq/lib SASL2_STATIC=1 OPENSSL_STATIC=1 OPENSSL_DIR=/usr/local/opt/openssl DEP_OPENSSL_DIR=/usr/local/opt/openssl RUSTFLAGS="-C target-feature=+crt-static" cargo build --release -p drogue-cloud-server --features static

      - name: Upload server binary
        uses: actions/upload-artifact@v2
        with:
          name: drogue-server-macos-amd64
          path: target/release/drogue-cloud-server
          if-no-files-found: error

          #- name: Build binary for Windows
          #  if: ${{ matrix.os == 'windows-2019' }}
          #  run: |
          #    git clone https://github.com/microsoft/vcpkg
          #    .\vcpkg\bootstrap-vcpkg.bat
          #    .\vcpkg\vcpkg install openssl
          #    .\vcpkg\vcpkg install libpq
          #    .\vcpkg\vcpkg install librdkafka
          #    .\vcpkg\vcpkg integrate install
          #    #$env:VCPKG_ROOT = "vcpkg"

          #    $env:PQ_LIB_STATIC = "1"
          #    $env:SASL2_STATIC = "1"
          #    $env:OPENSSL_STATIC = "1"
          #    $env:RUSTFLAGS = "-C target-feature=+crt-static"
          #    cargo build --release -p drogue-cloud-server --features static


  deploy:
    name: deploy on kind
    runs-on: ubuntu-20.04
    needs: [check, build]
    env:
      CLUSTER: "kind"
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Fetch container images
        uses: actions/download-artifact@v2
        with:
          name: container-images

      - name: Create k8s kind Cluster
        uses: helm/kind-action@v1.1.0
        with:
          wait: 300s
          cluster_name: kind
          config: deploy/kind/cluster-config.yaml
          version: v0.11.1

      - name: Load images in docker
        run: docker load -i all.tar

      - name: Tag images
        run: |
          make tag-images CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.sha }} SKIP_SERVER=1

      - name: Load images in kind
        run: make kind-load CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.sha }} SKIP_SERVER=1

      - name: Delete loaded images
        run: rm all.tar

      - name: List all images in kind
        run: docker exec -t kind-control-plane crictl images

      - name: Deploy drogue
        env:
          # this is no longer needed for 0.5.x, but be keep it around for 0.4
          TEST_CERTS_IMAGE: "dev.local/test-cert-generator:${{ github.sha }}"
          DEBUG: "true"
        run: |
          ./scripts/drgadm deploy \
            -m \
            -e \
            -s drogueCloudCore.defaults.images.repository=dev.local \
            -S drogueCloudCore.defaults.images.tag=${{ github.sha }} \
            -s drogueCloudCore.defaults.images.pullPolicy=Never \
            -s drogueCloudExamples.defaults.images.repository=dev.local \
            -S drogueCloudExamples.defaults.images.tag=${{ github.sha }} \
            -s drogueCloudExamples.defaults.images.pullPolicy=Never
        timeout-minutes: 30

      - name: Collect logs
        if: failure()
        run: |
          mkdir -p /tmp/logs/kind
          kind export logs /tmp/logs/kind
          mkdir -p /tmp/logs/ns
          for ns in kafka kourier-system knative-serving knative-eventing drogue-iot; do
            ./.github/scripts/collect_logs.sh /tmp/logs/ns/$ns $ns
          done

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: drogue-iot-logs
          path: /tmp/logs

  publish:
    if: ${{needs.check.outputs.do-publish}}

    runs-on: ubuntu-20.04

    env:
      CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}
      VERSION: ${{needs.check.outputs.version}}

    needs: [check, deploy, test, server-linux, server-macos]

    steps:

      - name: Dump state
        run: |
          echo "Tag/version: ${VERSION} / ${{needs.check.outputs.version}}"
          echo "Should we publish artifacts? - do-publish = ${{needs.check.outputs.do-publish}}"
          echo "Release? - release = ${{needs.check.outputs.release}}"
          echo "Pre-release? - prerelease = ${{needs.check.outputs.prerelease}}"

      # Start the actual build

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Create installer archives
        run: |
          make -C installer VERSION=$VERSION

      - uses: actions/upload-artifact@v2
        with:
          name: installers
          path: installer/build/drogue-install-*.zip
          if-no-files-found: error

      - name: Fetch container images
        uses: actions/download-artifact@v2
        with:
          name: container-images

      - name: Fetch container image server
        uses: actions/download-artifact@v2
        with:
          name: container-image-server

      - name: Fetch static server binary (linux-amd64)
        uses: actions/download-artifact@v2
        with:
          name: drogue-server-linux-amd64
          path: drogue-server-linux-amd64

      - name: Fetch static server binary (macos-amd64)
        uses: actions/download-artifact@v2
        with:
          name: drogue-server-macos-amd64
          path: drogue-server-macos-amd64

      - name: Rename static server binaries
        run: |
          mkdir server-binaries
          mv drogue-server-linux-amd64/drogue-cloud-server server-binaries/drogue-cloud-server-linux-amd64
          mv drogue-server-macos-amd64/drogue-cloud-server server-binaries/drogue-cloud-server-macos-amd64

      - name: Load images in docker
        run: |
          docker load -i all.tar
          docker load -i server.tar
          docker images

      - name: Login to github container repository
        run: echo "${{ secrets.GHCR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and push images
        run: |
          make push "IMAGE_TAG=$VERSION"
          sleep 10 # delay a bit for API rate limiting issues

      - name: Create Release
        id: create-release
        if: ${{ needs.check.outputs.release }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check.outputs.version }}
          release_name: ${{ needs.check.outputs.version }}
          draft: true
          prerelease: ${{ needs.check.outputs.prerelease }}

      - name: Upload Release Assets
        if: ${{ needs.check.outputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.check.outputs.version }}
        run: |
          # add install ZIPs
          hub release edit -m "" $(find installer/build -type f -name "drogue-install-*.zip" -printf "-a %p ") $TAG
          # add static server binaries
          hub release edit -m "" $(find server-binaries -type f -printf "-a %p ") $TAG

      - name: Remove draft status
        if: ${{ needs.check.outputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.check.outputs.version }}
        run: |
          # finally, remove the draft status
          hub release edit -m "" --draft=false $TAG

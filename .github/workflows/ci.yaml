name: CI

on:
  push:
    # Run on the main branch
    branches:
      - main
    # Releases are tags named 'v<version>', and must have the "major.minor.micro", for example: "0.1.0".
    # Release candidates are tagged as `v<version>-rc<num>`, for example: "0.1.0-rc1".
    tags:
      - "v*"
  # Also on PRs, just be careful not to publish anything
  pull_request:

env:
  VERSION_HELM: "v3.7.1"

jobs:

  check:
    runs-on: ubuntu-20.04

    outputs:
      do-publish: ${{steps.state.outputs.do-publish}}
      release: ${{steps.state.outputs.release}}
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}

    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      # Gather information for build

      - name: Evaluate state
        id: state
        run: |
          test -z "${{github.head_ref}}" && echo '::set-output name=do-publish::true'
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=release::true
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=prerelease::true
          fi

      - name: Set version
        if: ${{github.head_ref == ''}}
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV


  server-windows:
    runs-on: windows-2019
    env:
      VERSION: ${{needs.check.outputs.version}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          git clone https://github.com/microsoft/vcpkg
          .\vcpkg\bootstrap-vcpkg.bat
          #.\vcpkg\vcpkg install openssl
          #.\vcpkg\vcpkg install libpq
          #.\vcpkg\vcpkg install librdkafka
          .\vcpkg\vcpkg integrate install

      - name: Build binary
        run: |
          $env:PQ_LIB_STATIC = "1"
          $env:SASL2_STATIC = "1"
          $env:OPENSSL_STATIC = "1"
          $env:RUSTFLAGS = "-C target-feature=+crt-static"
          cargo build --release -p drogue-cloud-server --features win32

      - name: Upload server binary
        uses: actions/upload-artifact@v2
        with:
          name: drogue-server-windows-amd64
          path: target/release/drogue-cloud-server
          if-no-files-found: error

